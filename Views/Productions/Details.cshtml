@model StageCraft.Models.Production

@{
    ViewData["Title"] = "Production Details";
}

<div class="container mt-5">
    <div class="card bg-dark text-white border border-danger shadow-sm mx-auto" style="max-width: 700px;">
        @if (!string.IsNullOrEmpty(Model.PosterImagePath))
        {
            <img src="@Model.PosterImagePath" class="card-img-top rounded" alt="Poster for @Model.Title" style="height: 400px; object-fit: cover;" />
        }
        else
        {
            <div class="d-flex align-items-center justify-content-center bg-secondary" style="height: 400px;">
                <span class="text-light">No Poster Available</span>
            </div>
        }

        <div class="card-body">
            <h2 class="card-title text-center mb-4">@Model.Title</h2>

            <p class="card-text"><strong>Description:</strong> @Model.Description</p>
            <p class="card-text"><strong>Playwright:</strong> @Model.Playwright</p>
            <p class="card-text"><strong>Runtime:</strong> @Model.Runtime minutes</p>
            <p class="card-text"><strong>Opening Day:</strong> @Model.OpeningDay.ToShortDateString()</p>
            <p class="card-text"><strong>Closing Day:</strong> @Model.ClosingDay.ToShortDateString()</p>
            <p class="card-text"><strong>Evening Show Time:</strong> @Model.ShowTimeEve.ToString("f")</p>
            <p class="card-text"><strong>Season:</strong> @Model.Season</p>
            <p class="card-text"><strong>World Premiere:</strong> @(Model.IsWorldPremiere ? "Yes" : "No")</p>

            @if (!string.IsNullOrEmpty(Model.TicketLink))
            {
                <div class="text-center mt-3">
                    <a href="@Model.TicketLink" target="_blank" rel="noopener noreferrer" class="btn btn-danger btn-sm">
                        ðŸŽŸ Buy Tickets
                    </a>
                </div>
            }
        </div>

        <div class="card-footer bg-transparent text-center">
            <button class="btn btn-outline-light btn-sm" onclick="openCommentsModal(@Model.Id)">ðŸ’¬ See Comments</button>
            <a asp-action="Index" class="btn btn-outline-light btn-sm ms-2">Back to Productions</a>
        </div>
    </div>
</div>

<!-- ðŸ§  Comments Modal (Empty initially) -->
<div id="commentModal" class="modal" tabindex="-1" style="display:none; position:fixed; top:10%; left:50%; transform:translateX(-50%); background:black; padding:20px; border:2px solid red; width:90%; max-width:700px; z-index:9999;">
    <button id="closeModalBtn" style="position:absolute; top:10px; right:15px; background:none; border:none; font-size:24px; color:white;">&times;</button>
    <div id="commentModalContent" class="text-white">
        <!-- Comments will load dynamically -->
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            window.openCommentsModal = function (productionId) {
                const modal = document.getElementById('commentModal');
                const modalContent = document.getElementById('commentModalContent');

                modal.style.display = 'block';
                modalContent.innerHTML = `
                    <div class="text-center">
                        <div class="spinner-border text-danger" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                `;

                fetch(`/Comments/GetCommentsPartial?productionId=${productionId}`)
                    .then(response => response.text())
                    .then(html => {
                        modalContent.innerHTML = html;
                        initializeCommentsHandlers();
                    })
                    .catch(error => {
                        console.error('Failed to load comments:', error);
                        modalContent.innerHTML = `<p class="text-danger">Failed to load comments.</p>`;
                    });
            };

            function initializeCommentsHandlers() {
                const commentForm = document.getElementById('commentForm');
                if (commentForm) {
                    commentForm.addEventListener('submit', function (e) {
                        e.preventDefault();
                        const formData = new FormData(commentForm);
                        const token = commentForm.querySelector('input[name="__RequestVerificationToken"]').value;

                        fetch('/Comments/Create', {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': token
                            },
                            body: formData
                        })
                        .then(response => response.text())
                        .then(html => {
                            document.getElementById('commentModalContent').innerHTML = html;
                            initializeCommentsHandlers(); // Re-initialize handlers after reload
                        })
                        .catch(error => {
                            console.error('Error posting comment:', error);
                        });
                    });
                }

                document.querySelectorAll('.delete-comment-form').forEach(form => {
                    form.addEventListener('submit', function (e) {
                        e.preventDefault();
                        const formData = new FormData(form);
                        const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

                        fetch('/Comments/Delete', {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': token
                            },
                            body: formData
                        })
                        .then(response => response.text())
                        .then(html => {
                            document.getElementById('commentModalContent').innerHTML = html;
                            initializeCommentsHandlers(); // Re-initialize handlers after reload
                        })
                        .catch(error => {
                            console.error('Error deleting comment:', error);
                        });
                    });
                });
            }

            // Close modal
            const closeBtn = document.getElementById('closeModalBtn');
            if (closeBtn) {
                closeBtn.addEventListener('click', function () {
                    document.getElementById('commentModal').style.display = 'none';
                });
            }

            // Optional: click outside modal to close
            window.addEventListener('click', function (event) {
                const modal = document.getElementById('commentModal');
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        });
    </script>
}
