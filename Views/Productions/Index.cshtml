@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common
@model X.PagedList.IPagedList<StageCraft.Models.Production>

@{
    ViewData["Title"] = "All Productions";
}

<div class="container mt-5">
    <h2 class="text-white mb-4 text-center">ðŸŽ­ All Productions</h2>

    @if (User.IsInRole("Admin") || User.IsInRole("ProductionManager"))
    {
        <div class="text-center mb-4">
            <a class="btn btn-danger" asp-controller="Productions" asp-action="Create">+ Add New Production</a>
        </div>
    }

    <div class="row mb-4">
        <div class="col-md-6 offset-md-3">
            <form asp-action="Index" method="get" class="d-flex">
                <input type="text" name="searchString" value="@ViewBag.CurrentFilter" class="form-control me-2" placeholder="Search by title..." />
                <button type="submit" class="btn btn-outline-light">Search</button>
                @if (!string.IsNullOrEmpty(ViewBag.CurrentFilter))
                {
                    <a asp-action="Index" class="btn btn-outline-secondary ms-2">Clear</a>
                }
            </form>
        </div>
    </div>

    <p class="text-light text-end">
        @if (Model.TotalItemCount > 0)
        {
            <span>Showing @Model.FirstItemOnPage to @Model.LastItemOnPage of @Model.TotalItemCount production@(Model.TotalItemCount == 1 ? "" : "s")</span>
        }
        else
        {
            <span>No productions found</span>
        }
    </p>

    @if (Model.Count > 0)
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var item in Model)
            {
                <div class="col">
                    <div class="card bg-dark text-white border border-danger h-100 shadow-sm prod-card">
                        @if (!string.IsNullOrEmpty(item.PosterImagePath))
                        {
                            <img src="@item.PosterImagePath" class="card-img-top" alt="Poster for @item.Title" style="height: 280px; object-fit: cover;" />
                        }
                        else
                        {
                            <div class="card-img-top d-flex align-items-center justify-content-center bg-secondary" style="height: 280px;">
                                <span class="text-light">No Poster</span>
                            </div>
                        }

                        <div class="card-body text-center">
                            <h5 class="card-title">@item.Title</h5>
                            <p class="card-text text-truncate" style="max-height: 60px;">@item.Description</p>
                            <p class="card-text">
                                <small class="text-light">
                                    <strong>Opening:</strong> @item.OpeningDay.ToShortDateString()<br />
                                    <strong>Closing:</strong> @item.ClosingDay.ToShortDateString()
                                </small>
                            </p>

                            <button class="btn btn-outline-light btn-sm mt-2" onclick="openCommentsModal(@item.Id)">ðŸ’¬ See Comments</button>
                        </div>

                        @if (User.IsInRole("Admin") || User.IsInRole("ProductionManager"))
                        {
                            <div class="card-footer bg-transparent text-center">
                                <div class="d-flex justify-content-center gap-3">
                                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-warning">Edit</a>
                                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">Delete</a>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        @if (Model.PageCount > 1)
        {
            <div class="row mt-4">
                <div class="col-md-12 d-flex justify-content-center">
                    @Html.PagedListPager(
                        Model,
                        page => Url.Action("Index", new { page, searchString = ViewBag.CurrentFilter }),
                        new PagedListRenderOptions
                        {
                            LiElementClasses = new[] { "page-item" },
                            PageClasses = new[] { "page-link" },
                            Display = PagedListDisplayMode.IfNeeded,
                            DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                            DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
                            DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                            DisplayLinkToNextPage = PagedListDisplayMode.Always,
                            MaximumPageNumbersToDisplay = 5,
                            ContainerDivClasses = new[] { "pagination" }
                        }
                    )
                </div>
            </div>
        }
    }
    else
    {
        <div class="alert alert-info text-center mt-4">
            No productions found.
            @if (User.IsInRole("Admin") || User.IsInRole("ProductionManager"))
            {
                <a asp-action="Create" class="alert-link">Create a new production</a>
            }
        </div>
    }
</div>

<!-- Comments Modal -->
<div id="commentModal" class="modal" tabindex="-1" style="display:none; position:fixed; top:10%; left:50%; transform:translateX(-50%); background:black; padding:20px; border:2px solid red; width:90%; max-width:700px; z-index:9999;">
    <button id="closeModalBtn" style="position:absolute; top:10px; right:15px; background:none; border:none; font-size:24px; color:white;">&times;</button>
    <div id="commentModalContent" class="text-white">
        <!-- Comments will load dynamically -->
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            window.openCommentsModal = function (productionId) {
                const modal = document.getElementById('commentModal');
                const modalContent = document.getElementById('commentModalContent');

                modal.style.display = 'block';
                modalContent.innerHTML = `
                    <div class="text-center">
                        <div class="spinner-border text-danger" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                `;

                fetch(`/Comments/GetCommentsPartial?productionId=${productionId}`)
                    .then(response => response.text())
                    .then(html => {
                        modalContent.innerHTML = html;
                        initializeCommentsHandlers();
                    })
                    .catch(error => {
                        console.error('Failed to load comments:', error);
                        modalContent.innerHTML = `<p class="text-danger">Failed to load comments.</p>`;
                    });
            };

            function initializeCommentsHandlers() {
                const commentForm = document.getElementById('commentForm');
                if (commentForm) {
                    commentForm.addEventListener('submit', function (e) {
                        e.preventDefault();
                        const formData = new FormData(commentForm);
                        const token = commentForm.querySelector('input[name="__RequestVerificationToken"]').value;

                        fetch('/Comments/Create', {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': token
                            },
                            body: formData
                        })
                        .then(response => response.text())
                        .then(html => {
                            document.getElementById('commentModalContent').innerHTML = html;
                            initializeCommentsHandlers();
                        })
                        .catch(error => {
                            console.error('Error posting comment:', error);
                        });
                    });
                }

                document.querySelectorAll('.delete-comment-form').forEach(form => {
                    form.addEventListener('submit', function (e) {
                        e.preventDefault();
                        const formData = new FormData(form);
                        const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

                        fetch('/Comments/Delete', {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': token
                            },
                            body: formData
                        })
                        .then(response => response.text())
                        .then(html => {
                            document.getElementById('commentModalContent').innerHTML = html;
                            initializeCommentsHandlers();
                        })
                        .catch(error => {
                            console.error('Error deleting comment:', error);
                        });
                    });
                });
            }

            const closeBtn = document.getElementById('closeModalBtn');
            if (closeBtn) {
                closeBtn.addEventListener('click', function () {
                    document.getElementById('commentModal').style.display = 'none';
                });
            }

            window.addEventListener('click', function (event) {
                const modal = document.getElementById('commentModal');
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        });
    </script>
}
